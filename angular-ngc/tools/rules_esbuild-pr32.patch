From 22f6f2433e72cfb9c57c320f728f499b37e4e9ac Mon Sep 17 00:00:00 2001
From: Matt Mackay <mattem@gmail.com>
Date: Wed, 22 Jun 2022 11:31:02 +0100
Subject: [PATCH] fix: add onResolve plugin to enforce dependencies come from
 BAZEL_BIN

---
 esbuild/private/esbuild.bzl |  1 -
 esbuild/private/launcher.js | 32 ++++++++++++++++++++++++++++++++
 2 files changed, 32 insertions(+), 1 deletion(-)

diff --git a/esbuild/private/esbuild.bzl b/esbuild/private/esbuild.bzl
index b6eecce..04f71b1 100644
--- a/esbuild/private/esbuild.bzl
+++ b/esbuild/private/esbuild.bzl
@@ -199,7 +199,6 @@ def _esbuild_impl(ctx):
         "logLimit": 0,
         "metafile": True,
         "platform": ctx.attr.platform,
-        "preserveSymlinks": True,
         "sourcesContent": ctx.attr.sources_content,
         "target": ctx.attr.target,
     })
diff --git a/esbuild/private/launcher.js b/esbuild/private/launcher.js
index 7a46b31..22e1f37 100755
--- a/esbuild/private/launcher.js
+++ b/esbuild/private/launcher.js
@@ -97,6 +97,26 @@ async function processConfigFile(configFilePath, existingArgs = {}) {
   }, {})
 }
 
+const bazelSandboxAwareOnResolvePlugin = {
+  name: 'Bazel Sandbox Guard',
+  setup(build) {
+    const BAZEL_BINDIR = process.env.BAZEL_BINDIR
+
+    build.onResolve({ filter: /.*/ }, args => {
+      if (args.resolveDir.indexOf(BAZEL_BINDIR) === -1) {
+        return {
+          errors: [
+            {
+              text: `Failed to resolve import '${args.path}'. Ensure that it is a dependency of an upstream target`,
+              location: null,
+            }
+          ]
+        }
+      }
+    })
+  }
+}
+
 if (!process.env.ESBUILD_BINARY_PATH) {
   console.error('Expected environment variable ESBUILD_BINARY_PATH to be set')
   process.exit(1)
@@ -118,6 +138,18 @@ async function runOneBuild(args, userArgsFilePath, configFilePath) {
     }
   }
 
+  // If running under rules_js, add a plugin that attempts to keep resolves within the bin dir.
+  if (process.env.BAZEL_BINDIR) {
+    if (args.hasOwnProperty('plugins')) {
+      args.plugins.push(bazelSandboxAwareOnResolvePlugin)
+    } else {
+      args.plugins = [bazelSandboxAwareOnResolvePlugin]
+    }
+
+    // Never preserve symlinks as this breaks the pnpm node_modules layout.
+    args.preserveSymlinks = false
+  }
+
   const metafile = getFlag('--metafile')
 
   try {
